#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KotakDocuMentor.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="KotakDocuMentorDB")]
	public partial class DocumentorDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBlankSection(BlankSection instance);
    partial void UpdateBlankSection(BlankSection instance);
    partial void DeleteBlankSection(BlankSection instance);
    partial void InsertCaseStudyDocket(CaseStudyDocket instance);
    partial void UpdateCaseStudyDocket(CaseStudyDocket instance);
    partial void DeleteCaseStudyDocket(CaseStudyDocket instance);
    partial void InsertCaseStudyTag(CaseStudyTag instance);
    partial void UpdateCaseStudyTag(CaseStudyTag instance);
    partial void DeleteCaseStudyTag(CaseStudyTag instance);
    partial void InsertComponent(Component instance);
    partial void UpdateComponent(Component instance);
    partial void DeleteComponent(Component instance);
    partial void InsertConcept(Concept instance);
    partial void UpdateConcept(Concept instance);
    partial void DeleteConcept(Concept instance);
    partial void InsertConceptProduct(ConceptProduct instance);
    partial void UpdateConceptProduct(ConceptProduct instance);
    partial void DeleteConceptProduct(ConceptProduct instance);
    partial void InsertDocketProduct(DocketProduct instance);
    partial void UpdateDocketProduct(DocketProduct instance);
    partial void DeleteDocketProduct(DocketProduct instance);
    partial void InsertDocketReferenceSet(DocketReferenceSet instance);
    partial void UpdateDocketReferenceSet(DocketReferenceSet instance);
    partial void DeleteDocketReferenceSet(DocketReferenceSet instance);
    partial void InsertDocument(Document instance);
    partial void UpdateDocument(Document instance);
    partial void DeleteDocument(Document instance);
    partial void InsertFilledSection(FilledSection instance);
    partial void UpdateFilledSection(FilledSection instance);
    partial void DeleteFilledSection(FilledSection instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertSlide(Slide instance);
    partial void UpdateSlide(Slide instance);
    partial void DeleteSlide(Slide instance);
    partial void InsertSuperSet(SuperSet instance);
    partial void UpdateSuperSet(SuperSet instance);
    partial void DeleteSuperSet(SuperSet instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertDocket(Docket instance);
    partial void UpdateDocket(Docket instance);
    partial void DeleteDocket(Docket instance);
    partial void InsertReferenceSet(ReferenceSet instance);
    partial void UpdateReferenceSet(ReferenceSet instance);
    partial void DeleteReferenceSet(ReferenceSet instance);
    partial void InsertDocketDocument(DocketDocument instance);
    partial void UpdateDocketDocument(DocketDocument instance);
    partial void DeleteDocketDocument(DocketDocument instance);
    partial void InsertPage(Page instance);
    partial void UpdatePage(Page instance);
    partial void DeletePage(Page instance);
    partial void InsertExample(Example instance);
    partial void UpdateExample(Example instance);
    partial void DeleteExample(Example instance);
    partial void InsertQuiz(Quiz instance);
    partial void UpdateQuiz(Quiz instance);
    partial void DeleteQuiz(Quiz instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertQuestionType(QuestionType instance);
    partial void UpdateQuestionType(QuestionType instance);
    partial void DeleteQuestionType(QuestionType instance);
    partial void InsertQuizQuestion(QuizQuestion instance);
    partial void UpdateQuizQuestion(QuizQuestion instance);
    partial void DeleteQuizQuestion(QuizQuestion instance);
    partial void InsertCaseStudyQuiz(CaseStudyQuiz instance);
    partial void UpdateCaseStudyQuiz(CaseStudyQuiz instance);
    partial void DeleteCaseStudyQuiz(CaseStudyQuiz instance);
    partial void InsertAnswerChoice(AnswerChoice instance);
    partial void UpdateAnswerChoice(AnswerChoice instance);
    partial void DeleteAnswerChoice(AnswerChoice instance);
    partial void InsertResponse(Response instance);
    partial void UpdateResponse(Response instance);
    partial void DeleteResponse(Response instance);
    partial void InsertCaseStudy(CaseStudy instance);
    partial void UpdateCaseStudy(CaseStudy instance);
    partial void DeleteCaseStudy(CaseStudy instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertAssignment(Assignment instance);
    partial void UpdateAssignment(Assignment instance);
    partial void DeleteAssignment(Assignment instance);
    partial void InsertDocucheck(Docucheck instance);
    partial void UpdateDocucheck(Docucheck instance);
    partial void DeleteDocucheck(Docucheck instance);
    partial void InsertLevel(Level instance);
    partial void UpdateLevel(Level instance);
    partial void DeleteLevel(Level instance);
    #endregion
		
		public DocumentorDBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DocuMentorDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DocumentorDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DocumentorDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DocumentorDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DocumentorDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BlankSection> BlankSections
		{
			get
			{
				return this.GetTable<BlankSection>();
			}
		}
		
		public System.Data.Linq.Table<CaseStudyDocket> CaseStudyDockets
		{
			get
			{
				return this.GetTable<CaseStudyDocket>();
			}
		}
		
		public System.Data.Linq.Table<CaseStudyTag> CaseStudyTags
		{
			get
			{
				return this.GetTable<CaseStudyTag>();
			}
		}
		
		public System.Data.Linq.Table<Component> Components
		{
			get
			{
				return this.GetTable<Component>();
			}
		}
		
		public System.Data.Linq.Table<Concept> Concepts
		{
			get
			{
				return this.GetTable<Concept>();
			}
		}
		
		public System.Data.Linq.Table<ConceptProduct> ConceptProducts
		{
			get
			{
				return this.GetTable<ConceptProduct>();
			}
		}
		
		public System.Data.Linq.Table<DocketProduct> DocketProducts
		{
			get
			{
				return this.GetTable<DocketProduct>();
			}
		}
		
		public System.Data.Linq.Table<DocketReferenceSet> DocketReferenceSets
		{
			get
			{
				return this.GetTable<DocketReferenceSet>();
			}
		}
		
		public System.Data.Linq.Table<Document> Documents
		{
			get
			{
				return this.GetTable<Document>();
			}
		}
		
		public System.Data.Linq.Table<FilledSection> FilledSections
		{
			get
			{
				return this.GetTable<FilledSection>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Slide> Slides
		{
			get
			{
				return this.GetTable<Slide>();
			}
		}
		
		public System.Data.Linq.Table<SuperSet> SuperSets
		{
			get
			{
				return this.GetTable<SuperSet>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<Docket> Dockets
		{
			get
			{
				return this.GetTable<Docket>();
			}
		}
		
		public System.Data.Linq.Table<ReferenceSet> ReferenceSets
		{
			get
			{
				return this.GetTable<ReferenceSet>();
			}
		}
		
		public System.Data.Linq.Table<DocketDocument> DocketDocuments
		{
			get
			{
				return this.GetTable<DocketDocument>();
			}
		}
		
		public System.Data.Linq.Table<Page> Pages
		{
			get
			{
				return this.GetTable<Page>();
			}
		}
		
		public System.Data.Linq.Table<Example> Examples
		{
			get
			{
				return this.GetTable<Example>();
			}
		}
		
		public System.Data.Linq.Table<Quiz> Quizs
		{
			get
			{
				return this.GetTable<Quiz>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<QuestionType> QuestionTypes
		{
			get
			{
				return this.GetTable<QuestionType>();
			}
		}
		
		public System.Data.Linq.Table<QuizQuestion> QuizQuestions
		{
			get
			{
				return this.GetTable<QuizQuestion>();
			}
		}
		
		public System.Data.Linq.Table<CaseStudyQuiz> CaseStudyQuizs
		{
			get
			{
				return this.GetTable<CaseStudyQuiz>();
			}
		}
		
		public System.Data.Linq.Table<AnswerChoice> AnswerChoices
		{
			get
			{
				return this.GetTable<AnswerChoice>();
			}
		}
		
		public System.Data.Linq.Table<Response> Responses
		{
			get
			{
				return this.GetTable<Response>();
			}
		}
		
		public System.Data.Linq.Table<CaseStudy> CaseStudies
		{
			get
			{
				return this.GetTable<CaseStudy>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<Assignment> Assignments
		{
			get
			{
				return this.GetTable<Assignment>();
			}
		}
		
		public System.Data.Linq.Table<Docucheck> Docuchecks
		{
			get
			{
				return this.GetTable<Docucheck>();
			}
		}
		
		public System.Data.Linq.Table<Level> Levels
		{
			get
			{
				return this.GetTable<Level>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.blank_sections")]
	public partial class BlankSection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _page_id;
		
		private System.Nullable<int> _component_id;
		
		private System.Nullable<int> _xpos;
		
		private System.Nullable<int> _ypos;
		
		private System.Nullable<int> _width;
		
		private System.Nullable<int> _height;
		
		private EntitySet<FilledSection> _FilledSections;
		
		private EntityRef<Component> _Component;
		
		private EntityRef<Page> _Page;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onpage_idChanging(System.Nullable<int> value);
    partial void Onpage_idChanged();
    partial void Oncomponent_idChanging(System.Nullable<int> value);
    partial void Oncomponent_idChanged();
    partial void OnxposChanging(System.Nullable<int> value);
    partial void OnxposChanged();
    partial void OnyposChanging(System.Nullable<int> value);
    partial void OnyposChanged();
    partial void OnwidthChanging(System.Nullable<int> value);
    partial void OnwidthChanged();
    partial void OnheightChanging(System.Nullable<int> value);
    partial void OnheightChanged();
    #endregion
		
		public BlankSection()
		{
			this._FilledSections = new EntitySet<FilledSection>(new Action<FilledSection>(this.attach_FilledSections), new Action<FilledSection>(this.detach_FilledSections));
			this._Component = default(EntityRef<Component>);
			this._Page = default(EntityRef<Page>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_page_id", DbType="Int")]
		public System.Nullable<int> page_id
		{
			get
			{
				return this._page_id;
			}
			set
			{
				if ((this._page_id != value))
				{
					if (this._Page.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpage_idChanging(value);
					this.SendPropertyChanging();
					this._page_id = value;
					this.SendPropertyChanged("page_id");
					this.Onpage_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_component_id", DbType="Int")]
		public System.Nullable<int> component_id
		{
			get
			{
				return this._component_id;
			}
			set
			{
				if ((this._component_id != value))
				{
					if (this._Component.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncomponent_idChanging(value);
					this.SendPropertyChanging();
					this._component_id = value;
					this.SendPropertyChanged("component_id");
					this.Oncomponent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xpos", DbType="Int")]
		public System.Nullable<int> xpos
		{
			get
			{
				return this._xpos;
			}
			set
			{
				if ((this._xpos != value))
				{
					this.OnxposChanging(value);
					this.SendPropertyChanging();
					this._xpos = value;
					this.SendPropertyChanged("xpos");
					this.OnxposChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ypos", DbType="Int")]
		public System.Nullable<int> ypos
		{
			get
			{
				return this._ypos;
			}
			set
			{
				if ((this._ypos != value))
				{
					this.OnyposChanging(value);
					this.SendPropertyChanging();
					this._ypos = value;
					this.SendPropertyChanged("ypos");
					this.OnyposChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_width", DbType="Int")]
		public System.Nullable<int> width
		{
			get
			{
				return this._width;
			}
			set
			{
				if ((this._width != value))
				{
					this.OnwidthChanging(value);
					this.SendPropertyChanging();
					this._width = value;
					this.SendPropertyChanged("width");
					this.OnwidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_height", DbType="Int")]
		public System.Nullable<int> height
		{
			get
			{
				return this._height;
			}
			set
			{
				if ((this._height != value))
				{
					this.OnheightChanging(value);
					this.SendPropertyChanging();
					this._height = value;
					this.SendPropertyChanged("height");
					this.OnheightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlankSection_FilledSection", Storage="_FilledSections", ThisKey="id", OtherKey="blank_section_id")]
		public EntitySet<FilledSection> FilledSections
		{
			get
			{
				return this._FilledSections;
			}
			set
			{
				this._FilledSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_BlankSection", Storage="_Component", ThisKey="component_id", OtherKey="id", IsForeignKey=true)]
		public Component Component
		{
			get
			{
				return this._Component.Entity;
			}
			set
			{
				Component previousValue = this._Component.Entity;
				if (((previousValue != value) 
							|| (this._Component.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Component.Entity = null;
						previousValue.BlankSections.Remove(this);
					}
					this._Component.Entity = value;
					if ((value != null))
					{
						value.BlankSections.Add(this);
						this._component_id = value.id;
					}
					else
					{
						this._component_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Component");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Page_BlankSection", Storage="_Page", ThisKey="page_id", OtherKey="id", IsForeignKey=true)]
		public Page Page
		{
			get
			{
				return this._Page.Entity;
			}
			set
			{
				Page previousValue = this._Page.Entity;
				if (((previousValue != value) 
							|| (this._Page.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Page.Entity = null;
						previousValue.BlankSections.Remove(this);
					}
					this._Page.Entity = value;
					if ((value != null))
					{
						value.BlankSections.Add(this);
						this._page_id = value.id;
					}
					else
					{
						this._page_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Page");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FilledSections(FilledSection entity)
		{
			this.SendPropertyChanging();
			entity.BlankSection = this;
		}
		
		private void detach_FilledSections(FilledSection entity)
		{
			this.SendPropertyChanging();
			entity.BlankSection = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.case_studies_dockets")]
	public partial class CaseStudyDocket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _case_study_id;
		
		private int _docket_id;
		
		private EntityRef<Docket> _Docket;
		
		private EntityRef<CaseStudy> _CaseStudy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Oncase_study_idChanging(int value);
    partial void Oncase_study_idChanged();
    partial void Ondocket_idChanging(int value);
    partial void Ondocket_idChanged();
    #endregion
		
		public CaseStudyDocket()
		{
			this._Docket = default(EntityRef<Docket>);
			this._CaseStudy = default(EntityRef<CaseStudy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_case_study_id", DbType="Int NOT NULL")]
		public int case_study_id
		{
			get
			{
				return this._case_study_id;
			}
			set
			{
				if ((this._case_study_id != value))
				{
					if (this._CaseStudy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncase_study_idChanging(value);
					this.SendPropertyChanging();
					this._case_study_id = value;
					this.SendPropertyChanged("case_study_id");
					this.Oncase_study_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_docket_id", DbType="Int NOT NULL")]
		public int docket_id
		{
			get
			{
				return this._docket_id;
			}
			set
			{
				if ((this._docket_id != value))
				{
					if (this._Docket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondocket_idChanging(value);
					this.SendPropertyChanging();
					this._docket_id = value;
					this.SendPropertyChanged("docket_id");
					this.Ondocket_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Docket_CaseStudyDocket", Storage="_Docket", ThisKey="docket_id", OtherKey="id", IsForeignKey=true)]
		public Docket Docket
		{
			get
			{
				return this._Docket.Entity;
			}
			set
			{
				Docket previousValue = this._Docket.Entity;
				if (((previousValue != value) 
							|| (this._Docket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Docket.Entity = null;
						previousValue.CaseStudyDockets.Remove(this);
					}
					this._Docket.Entity = value;
					if ((value != null))
					{
						value.CaseStudyDockets.Add(this);
						this._docket_id = value.id;
					}
					else
					{
						this._docket_id = default(int);
					}
					this.SendPropertyChanged("Docket");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CaseStudy_CaseStudyDocket", Storage="_CaseStudy", ThisKey="case_study_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CaseStudy CaseStudy
		{
			get
			{
				return this._CaseStudy.Entity;
			}
			set
			{
				CaseStudy previousValue = this._CaseStudy.Entity;
				if (((previousValue != value) 
							|| (this._CaseStudy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CaseStudy.Entity = null;
						previousValue.CaseStudyDockets.Remove(this);
					}
					this._CaseStudy.Entity = value;
					if ((value != null))
					{
						value.CaseStudyDockets.Add(this);
						this._case_study_id = value.id;
					}
					else
					{
						this._case_study_id = default(int);
					}
					this.SendPropertyChanged("CaseStudy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.case_studies_tags")]
	public partial class CaseStudyTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _case_study_id;
		
		private int _tag_id;
		
		private EntityRef<Tag> _Tag;
		
		private EntityRef<CaseStudy> _CaseStudy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Oncase_study_idChanging(int value);
    partial void Oncase_study_idChanged();
    partial void Ontag_idChanging(int value);
    partial void Ontag_idChanged();
    #endregion
		
		public CaseStudyTag()
		{
			this._Tag = default(EntityRef<Tag>);
			this._CaseStudy = default(EntityRef<CaseStudy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_case_study_id", DbType="Int NOT NULL")]
		public int case_study_id
		{
			get
			{
				return this._case_study_id;
			}
			set
			{
				if ((this._case_study_id != value))
				{
					if (this._CaseStudy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncase_study_idChanging(value);
					this.SendPropertyChanging();
					this._case_study_id = value;
					this.SendPropertyChanged("case_study_id");
					this.Oncase_study_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tag_id", DbType="Int NOT NULL")]
		public int tag_id
		{
			get
			{
				return this._tag_id;
			}
			set
			{
				if ((this._tag_id != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontag_idChanging(value);
					this.SendPropertyChanging();
					this._tag_id = value;
					this.SendPropertyChanged("tag_id");
					this.Ontag_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_CaseStudyTag", Storage="_Tag", ThisKey="tag_id", OtherKey="id", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.CaseStudyTags.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.CaseStudyTags.Add(this);
						this._tag_id = value.id;
					}
					else
					{
						this._tag_id = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CaseStudy_CaseStudyTag", Storage="_CaseStudy", ThisKey="case_study_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CaseStudy CaseStudy
		{
			get
			{
				return this._CaseStudy.Entity;
			}
			set
			{
				CaseStudy previousValue = this._CaseStudy.Entity;
				if (((previousValue != value) 
							|| (this._CaseStudy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CaseStudy.Entity = null;
						previousValue.CaseStudyTags.Remove(this);
					}
					this._CaseStudy.Entity = value;
					if ((value != null))
					{
						value.CaseStudyTags.Add(this);
						this._case_study_id = value.id;
					}
					else
					{
						this._case_study_id = default(int);
					}
					this.SendPropertyChanged("CaseStudy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.components")]
	public partial class Component : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<BlankSection> _BlankSections;
		
		private EntitySet<Example> _Examples;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Component()
		{
			this._BlankSections = new EntitySet<BlankSection>(new Action<BlankSection>(this.attach_BlankSections), new Action<BlankSection>(this.detach_BlankSections));
			this._Examples = new EntitySet<Example>(new Action<Example>(this.attach_Examples), new Action<Example>(this.detach_Examples));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_BlankSection", Storage="_BlankSections", ThisKey="id", OtherKey="component_id")]
		public EntitySet<BlankSection> BlankSections
		{
			get
			{
				return this._BlankSections;
			}
			set
			{
				this._BlankSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_Example", Storage="_Examples", ThisKey="id", OtherKey="component_id")]
		public EntitySet<Example> Examples
		{
			get
			{
				return this._Examples;
			}
			set
			{
				this._Examples.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlankSections(BlankSection entity)
		{
			this.SendPropertyChanging();
			entity.Component = this;
		}
		
		private void detach_BlankSections(BlankSection entity)
		{
			this.SendPropertyChanging();
			entity.Component = null;
		}
		
		private void attach_Examples(Example entity)
		{
			this.SendPropertyChanging();
			entity.Component = this;
		}
		
		private void detach_Examples(Example entity)
		{
			this.SendPropertyChanging();
			entity.Component = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.concepts")]
	public partial class Concept : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _description;
		
		private EntitySet<ConceptProduct> _ConceptProducts;
		
		private EntitySet<Slide> _Slides;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public Concept()
		{
			this._ConceptProducts = new EntitySet<ConceptProduct>(new Action<ConceptProduct>(this.attach_ConceptProducts), new Action<ConceptProduct>(this.detach_ConceptProducts));
			this._Slides = new EntitySet<Slide>(new Action<Slide>(this.attach_Slides), new Action<Slide>(this.detach_Slides));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ConceptProduct", Storage="_ConceptProducts", ThisKey="id", OtherKey="concept_id")]
		public EntitySet<ConceptProduct> ConceptProducts
		{
			get
			{
				return this._ConceptProducts;
			}
			set
			{
				this._ConceptProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Slide", Storage="_Slides", ThisKey="id", OtherKey="concept_id")]
		public EntitySet<Slide> Slides
		{
			get
			{
				return this._Slides;
			}
			set
			{
				this._Slides.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConceptProducts(ConceptProduct entity)
		{
			this.SendPropertyChanging();
			entity.Concept = this;
		}
		
		private void detach_ConceptProducts(ConceptProduct entity)
		{
			this.SendPropertyChanging();
			entity.Concept = null;
		}
		
		private void attach_Slides(Slide entity)
		{
			this.SendPropertyChanging();
			entity.Concept = this;
		}
		
		private void detach_Slides(Slide entity)
		{
			this.SendPropertyChanging();
			entity.Concept = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.concepts_products")]
	public partial class ConceptProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _concept_id;
		
		private int _product_id;
		
		private EntityRef<Concept> _Concept;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onconcept_idChanging(int value);
    partial void Onconcept_idChanged();
    partial void Onproduct_idChanging(int value);
    partial void Onproduct_idChanged();
    #endregion
		
		public ConceptProduct()
		{
			this._Concept = default(EntityRef<Concept>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_concept_id", DbType="Int NOT NULL")]
		public int concept_id
		{
			get
			{
				return this._concept_id;
			}
			set
			{
				if ((this._concept_id != value))
				{
					if (this._Concept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onconcept_idChanging(value);
					this.SendPropertyChanging();
					this._concept_id = value;
					this.SendPropertyChanged("concept_id");
					this.Onconcept_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_product_id", DbType="Int NOT NULL")]
		public int product_id
		{
			get
			{
				return this._product_id;
			}
			set
			{
				if ((this._product_id != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproduct_idChanging(value);
					this.SendPropertyChanging();
					this._product_id = value;
					this.SendPropertyChanged("product_id");
					this.Onproduct_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_ConceptProduct", Storage="_Concept", ThisKey="concept_id", OtherKey="id", IsForeignKey=true)]
		public Concept Concept
		{
			get
			{
				return this._Concept.Entity;
			}
			set
			{
				Concept previousValue = this._Concept.Entity;
				if (((previousValue != value) 
							|| (this._Concept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Concept.Entity = null;
						previousValue.ConceptProducts.Remove(this);
					}
					this._Concept.Entity = value;
					if ((value != null))
					{
						value.ConceptProducts.Add(this);
						this._concept_id = value.id;
					}
					else
					{
						this._concept_id = default(int);
					}
					this.SendPropertyChanged("Concept");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ConceptProduct", Storage="_Product", ThisKey="product_id", OtherKey="id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ConceptProducts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ConceptProducts.Add(this);
						this._product_id = value.id;
					}
					else
					{
						this._product_id = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dockets_products")]
	public partial class DocketProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _docket_id;
		
		private int _product_id;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Docket> _Docket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ondocket_idChanging(int value);
    partial void Ondocket_idChanged();
    partial void Onproduct_idChanging(int value);
    partial void Onproduct_idChanged();
    #endregion
		
		public DocketProduct()
		{
			this._Product = default(EntityRef<Product>);
			this._Docket = default(EntityRef<Docket>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_docket_id", DbType="Int NOT NULL")]
		public int docket_id
		{
			get
			{
				return this._docket_id;
			}
			set
			{
				if ((this._docket_id != value))
				{
					if (this._Docket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondocket_idChanging(value);
					this.SendPropertyChanging();
					this._docket_id = value;
					this.SendPropertyChanged("docket_id");
					this.Ondocket_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_product_id", DbType="Int NOT NULL")]
		public int product_id
		{
			get
			{
				return this._product_id;
			}
			set
			{
				if ((this._product_id != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproduct_idChanging(value);
					this.SendPropertyChanging();
					this._product_id = value;
					this.SendPropertyChanged("product_id");
					this.Onproduct_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_DocketProduct", Storage="_Product", ThisKey="product_id", OtherKey="id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.DocketProducts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.DocketProducts.Add(this);
						this._product_id = value.id;
					}
					else
					{
						this._product_id = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Docket_DocketProduct", Storage="_Docket", ThisKey="docket_id", OtherKey="id", IsForeignKey=true)]
		public Docket Docket
		{
			get
			{
				return this._Docket.Entity;
			}
			set
			{
				Docket previousValue = this._Docket.Entity;
				if (((previousValue != value) 
							|| (this._Docket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Docket.Entity = null;
						previousValue.DocketProducts.Remove(this);
					}
					this._Docket.Entity = value;
					if ((value != null))
					{
						value.DocketProducts.Add(this);
						this._docket_id = value.id;
					}
					else
					{
						this._docket_id = default(int);
					}
					this.SendPropertyChanged("Docket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dockets_reference_sets")]
	public partial class DocketReferenceSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _docket_id;
		
		private int _reference_set_id;
		
		private EntityRef<Docket> _Docket;
		
		private EntityRef<ReferenceSet> _ReferenceSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ondocket_idChanging(int value);
    partial void Ondocket_idChanged();
    partial void Onreference_set_idChanging(int value);
    partial void Onreference_set_idChanged();
    #endregion
		
		public DocketReferenceSet()
		{
			this._Docket = default(EntityRef<Docket>);
			this._ReferenceSet = default(EntityRef<ReferenceSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_docket_id", DbType="Int NOT NULL")]
		public int docket_id
		{
			get
			{
				return this._docket_id;
			}
			set
			{
				if ((this._docket_id != value))
				{
					if (this._Docket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondocket_idChanging(value);
					this.SendPropertyChanging();
					this._docket_id = value;
					this.SendPropertyChanged("docket_id");
					this.Ondocket_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reference_set_id", DbType="Int NOT NULL")]
		public int reference_set_id
		{
			get
			{
				return this._reference_set_id;
			}
			set
			{
				if ((this._reference_set_id != value))
				{
					if (this._ReferenceSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onreference_set_idChanging(value);
					this.SendPropertyChanging();
					this._reference_set_id = value;
					this.SendPropertyChanged("reference_set_id");
					this.Onreference_set_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Docket_DocketReferenceSet", Storage="_Docket", ThisKey="docket_id", OtherKey="id", IsForeignKey=true)]
		public Docket Docket
		{
			get
			{
				return this._Docket.Entity;
			}
			set
			{
				Docket previousValue = this._Docket.Entity;
				if (((previousValue != value) 
							|| (this._Docket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Docket.Entity = null;
						previousValue.DocketReferenceSets.Remove(this);
					}
					this._Docket.Entity = value;
					if ((value != null))
					{
						value.DocketReferenceSets.Add(this);
						this._docket_id = value.id;
					}
					else
					{
						this._docket_id = default(int);
					}
					this.SendPropertyChanged("Docket");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReferenceSet_DocketReferenceSet", Storage="_ReferenceSet", ThisKey="reference_set_id", OtherKey="id", IsForeignKey=true)]
		public ReferenceSet ReferenceSet
		{
			get
			{
				return this._ReferenceSet.Entity;
			}
			set
			{
				ReferenceSet previousValue = this._ReferenceSet.Entity;
				if (((previousValue != value) 
							|| (this._ReferenceSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReferenceSet.Entity = null;
						previousValue.DocketReferenceSets.Remove(this);
					}
					this._ReferenceSet.Entity = value;
					if ((value != null))
					{
						value.DocketReferenceSets.Add(this);
						this._reference_set_id = value.id;
					}
					else
					{
						this._reference_set_id = default(int);
					}
					this.SendPropertyChanged("ReferenceSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.documents")]
	public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<DocketDocument> _DocketDocuments;
		
		private EntitySet<Page> _Pages;
		
		private EntitySet<Docucheck> _Docuchecks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Document()
		{
			this._DocketDocuments = new EntitySet<DocketDocument>(new Action<DocketDocument>(this.attach_DocketDocuments), new Action<DocketDocument>(this.detach_DocketDocuments));
			this._Pages = new EntitySet<Page>(new Action<Page>(this.attach_Pages), new Action<Page>(this.detach_Pages));
			this._Docuchecks = new EntitySet<Docucheck>(new Action<Docucheck>(this.attach_Docuchecks), new Action<Docucheck>(this.detach_Docuchecks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocketDocument", Storage="_DocketDocuments", ThisKey="id", OtherKey="document_id")]
		public EntitySet<DocketDocument> DocketDocuments
		{
			get
			{
				return this._DocketDocuments;
			}
			set
			{
				this._DocketDocuments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Page", Storage="_Pages", ThisKey="id", OtherKey="document_id")]
		public EntitySet<Page> Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				this._Pages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Docucheck", Storage="_Docuchecks", ThisKey="id", OtherKey="document_id")]
		public EntitySet<Docucheck> Docuchecks
		{
			get
			{
				return this._Docuchecks;
			}
			set
			{
				this._Docuchecks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocketDocuments(DocketDocument entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_DocketDocuments(DocketDocument entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_Pages(Page entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
		
		private void attach_Docuchecks(Docucheck entity)
		{
			this.SendPropertyChanging();
			entity.Document = this;
		}
		
		private void detach_Docuchecks(Docucheck entity)
		{
			this.SendPropertyChanging();
			entity.Document = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.filled_sections")]
	public partial class FilledSection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _docucheck_id;
		
		private System.Nullable<int> _blank_section_id;
		
		private System.Nullable<int> _example_id;
		
		private System.Nullable<bool> _has_no_error;
		
		private System.Nullable<bool> _marked_correctly;
		
		private EntityRef<BlankSection> _BlankSection;
		
		private EntityRef<Example> _Example;
		
		private EntityRef<Docucheck> _Docucheck;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ondocucheck_idChanging(System.Nullable<int> value);
    partial void Ondocucheck_idChanged();
    partial void Onblank_section_idChanging(System.Nullable<int> value);
    partial void Onblank_section_idChanged();
    partial void Onexample_idChanging(System.Nullable<int> value);
    partial void Onexample_idChanged();
    partial void Onhas_no_errorChanging(System.Nullable<bool> value);
    partial void Onhas_no_errorChanged();
    partial void Onmarked_correctlyChanging(System.Nullable<bool> value);
    partial void Onmarked_correctlyChanged();
    #endregion
		
		public FilledSection()
		{
			this._BlankSection = default(EntityRef<BlankSection>);
			this._Example = default(EntityRef<Example>);
			this._Docucheck = default(EntityRef<Docucheck>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_docucheck_id", DbType="Int")]
		public System.Nullable<int> docucheck_id
		{
			get
			{
				return this._docucheck_id;
			}
			set
			{
				if ((this._docucheck_id != value))
				{
					if (this._Docucheck.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondocucheck_idChanging(value);
					this.SendPropertyChanging();
					this._docucheck_id = value;
					this.SendPropertyChanged("docucheck_id");
					this.Ondocucheck_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blank_section_id", DbType="Int")]
		public System.Nullable<int> blank_section_id
		{
			get
			{
				return this._blank_section_id;
			}
			set
			{
				if ((this._blank_section_id != value))
				{
					if (this._BlankSection.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onblank_section_idChanging(value);
					this.SendPropertyChanging();
					this._blank_section_id = value;
					this.SendPropertyChanged("blank_section_id");
					this.Onblank_section_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_example_id", DbType="Int")]
		public System.Nullable<int> example_id
		{
			get
			{
				return this._example_id;
			}
			set
			{
				if ((this._example_id != value))
				{
					if (this._Example.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onexample_idChanging(value);
					this.SendPropertyChanging();
					this._example_id = value;
					this.SendPropertyChanged("example_id");
					this.Onexample_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_has_no_error", DbType="Bit")]
		public System.Nullable<bool> has_no_error
		{
			get
			{
				return this._has_no_error;
			}
			set
			{
				if ((this._has_no_error != value))
				{
					this.Onhas_no_errorChanging(value);
					this.SendPropertyChanging();
					this._has_no_error = value;
					this.SendPropertyChanged("has_no_error");
					this.Onhas_no_errorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_marked_correctly", DbType="Bit")]
		public System.Nullable<bool> marked_correctly
		{
			get
			{
				return this._marked_correctly;
			}
			set
			{
				if ((this._marked_correctly != value))
				{
					this.Onmarked_correctlyChanging(value);
					this.SendPropertyChanging();
					this._marked_correctly = value;
					this.SendPropertyChanged("marked_correctly");
					this.Onmarked_correctlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BlankSection_FilledSection", Storage="_BlankSection", ThisKey="blank_section_id", OtherKey="id", IsForeignKey=true)]
		public BlankSection BlankSection
		{
			get
			{
				return this._BlankSection.Entity;
			}
			set
			{
				BlankSection previousValue = this._BlankSection.Entity;
				if (((previousValue != value) 
							|| (this._BlankSection.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BlankSection.Entity = null;
						previousValue.FilledSections.Remove(this);
					}
					this._BlankSection.Entity = value;
					if ((value != null))
					{
						value.FilledSections.Add(this);
						this._blank_section_id = value.id;
					}
					else
					{
						this._blank_section_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("BlankSection");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Example_FilledSection", Storage="_Example", ThisKey="example_id", OtherKey="id", IsForeignKey=true)]
		public Example Example
		{
			get
			{
				return this._Example.Entity;
			}
			set
			{
				Example previousValue = this._Example.Entity;
				if (((previousValue != value) 
							|| (this._Example.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Example.Entity = null;
						previousValue.FilledSections.Remove(this);
					}
					this._Example.Entity = value;
					if ((value != null))
					{
						value.FilledSections.Add(this);
						this._example_id = value.id;
					}
					else
					{
						this._example_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Example");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Docucheck_FilledSection", Storage="_Docucheck", ThisKey="docucheck_id", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Docucheck Docucheck
		{
			get
			{
				return this._Docucheck.Entity;
			}
			set
			{
				Docucheck previousValue = this._Docucheck.Entity;
				if (((previousValue != value) 
							|| (this._Docucheck.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Docucheck.Entity = null;
						previousValue.FilledSections.Remove(this);
					}
					this._Docucheck.Entity = value;
					if ((value != null))
					{
						value.FilledSections.Add(this);
						this._docucheck_id = value.id;
					}
					else
					{
						this._docucheck_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Docucheck");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<ConceptProduct> _ConceptProducts;
		
		private EntitySet<DocketProduct> _DocketProducts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Product()
		{
			this._ConceptProducts = new EntitySet<ConceptProduct>(new Action<ConceptProduct>(this.attach_ConceptProducts), new Action<ConceptProduct>(this.detach_ConceptProducts));
			this._DocketProducts = new EntitySet<DocketProduct>(new Action<DocketProduct>(this.attach_DocketProducts), new Action<DocketProduct>(this.detach_DocketProducts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ConceptProduct", Storage="_ConceptProducts", ThisKey="id", OtherKey="product_id")]
		public EntitySet<ConceptProduct> ConceptProducts
		{
			get
			{
				return this._ConceptProducts;
			}
			set
			{
				this._ConceptProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_DocketProduct", Storage="_DocketProducts", ThisKey="id", OtherKey="product_id")]
		public EntitySet<DocketProduct> DocketProducts
		{
			get
			{
				return this._DocketProducts;
			}
			set
			{
				this._DocketProducts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ConceptProducts(ConceptProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ConceptProducts(ConceptProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_DocketProducts(DocketProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_DocketProducts(DocketProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.slides")]
	public partial class Slide : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _concept_id;
		
		private string _html_block;
		
		private EntityRef<Concept> _Concept;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onconcept_idChanging(System.Nullable<int> value);
    partial void Onconcept_idChanged();
    partial void Onhtml_blockChanging(string value);
    partial void Onhtml_blockChanged();
    #endregion
		
		public Slide()
		{
			this._Concept = default(EntityRef<Concept>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_concept_id", DbType="Int")]
		public System.Nullable<int> concept_id
		{
			get
			{
				return this._concept_id;
			}
			set
			{
				if ((this._concept_id != value))
				{
					if (this._Concept.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onconcept_idChanging(value);
					this.SendPropertyChanging();
					this._concept_id = value;
					this.SendPropertyChanged("concept_id");
					this.Onconcept_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_html_block", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string html_block
		{
			get
			{
				return this._html_block;
			}
			set
			{
				if ((this._html_block != value))
				{
					this.Onhtml_blockChanging(value);
					this.SendPropertyChanging();
					this._html_block = value;
					this.SendPropertyChanged("html_block");
					this.Onhtml_blockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concept_Slide", Storage="_Concept", ThisKey="concept_id", OtherKey="id", IsForeignKey=true)]
		public Concept Concept
		{
			get
			{
				return this._Concept.Entity;
			}
			set
			{
				Concept previousValue = this._Concept.Entity;
				if (((previousValue != value) 
							|| (this._Concept.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Concept.Entity = null;
						previousValue.Slides.Remove(this);
					}
					this._Concept.Entity = value;
					if ((value != null))
					{
						value.Slides.Add(this);
						this._concept_id = value.id;
					}
					else
					{
						this._concept_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Concept");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.super_sets")]
	public partial class SuperSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<Docket> _Dockets;
		
		private EntitySet<ReferenceSet> _ReferenceSets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public SuperSet()
		{
			this._Dockets = new EntitySet<Docket>(new Action<Docket>(this.attach_Dockets), new Action<Docket>(this.detach_Dockets));
			this._ReferenceSets = new EntitySet<ReferenceSet>(new Action<ReferenceSet>(this.attach_ReferenceSets), new Action<ReferenceSet>(this.detach_ReferenceSets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SuperSet_Docket", Storage="_Dockets", ThisKey="id", OtherKey="super_set_id")]
		public EntitySet<Docket> Dockets
		{
			get
			{
				return this._Dockets;
			}
			set
			{
				this._Dockets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SuperSet_ReferenceSet", Storage="_ReferenceSets", ThisKey="id", OtherKey="super_set_id")]
		public EntitySet<ReferenceSet> ReferenceSets
		{
			get
			{
				return this._ReferenceSets;
			}
			set
			{
				this._ReferenceSets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Dockets(Docket entity)
		{
			this.SendPropertyChanging();
			entity.SuperSet = this;
		}
		
		private void detach_Dockets(Docket entity)
		{
			this.SendPropertyChanging();
			entity.SuperSet = null;
		}
		
		private void attach_ReferenceSets(ReferenceSet entity)
		{
			this.SendPropertyChanging();
			entity.SuperSet = this;
		}
		
		private void detach_ReferenceSets(ReferenceSet entity)
		{
			this.SendPropertyChanging();
			entity.SuperSet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tags")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<CaseStudyTag> _CaseStudyTags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Tag()
		{
			this._CaseStudyTags = new EntitySet<CaseStudyTag>(new Action<CaseStudyTag>(this.attach_CaseStudyTags), new Action<CaseStudyTag>(this.detach_CaseStudyTags));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_CaseStudyTag", Storage="_CaseStudyTags", ThisKey="id", OtherKey="tag_id")]
		public EntitySet<CaseStudyTag> CaseStudyTags
		{
			get
			{
				return this._CaseStudyTags;
			}
			set
			{
				this._CaseStudyTags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CaseStudyTags(CaseStudyTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_CaseStudyTags(CaseStudyTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dockets")]
	public partial class Docket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<int> _super_set_id;
		
		private EntitySet<CaseStudyDocket> _CaseStudyDockets;
		
		private EntitySet<DocketProduct> _DocketProducts;
		
		private EntitySet<DocketReferenceSet> _DocketReferenceSets;
		
		private EntitySet<DocketDocument> _DocketDocuments;
		
		private EntitySet<Docucheck> _Docuchecks;
		
		private EntityRef<SuperSet> _SuperSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onsuper_set_idChanging(System.Nullable<int> value);
    partial void Onsuper_set_idChanged();
    #endregion
		
		public Docket()
		{
			this._CaseStudyDockets = new EntitySet<CaseStudyDocket>(new Action<CaseStudyDocket>(this.attach_CaseStudyDockets), new Action<CaseStudyDocket>(this.detach_CaseStudyDockets));
			this._DocketProducts = new EntitySet<DocketProduct>(new Action<DocketProduct>(this.attach_DocketProducts), new Action<DocketProduct>(this.detach_DocketProducts));
			this._DocketReferenceSets = new EntitySet<DocketReferenceSet>(new Action<DocketReferenceSet>(this.attach_DocketReferenceSets), new Action<DocketReferenceSet>(this.detach_DocketReferenceSets));
			this._DocketDocuments = new EntitySet<DocketDocument>(new Action<DocketDocument>(this.attach_DocketDocuments), new Action<DocketDocument>(this.detach_DocketDocuments));
			this._Docuchecks = new EntitySet<Docucheck>(new Action<Docucheck>(this.attach_Docuchecks), new Action<Docucheck>(this.detach_Docuchecks));
			this._SuperSet = default(EntityRef<SuperSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_super_set_id", DbType="Int")]
		public System.Nullable<int> super_set_id
		{
			get
			{
				return this._super_set_id;
			}
			set
			{
				if ((this._super_set_id != value))
				{
					if (this._SuperSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsuper_set_idChanging(value);
					this.SendPropertyChanging();
					this._super_set_id = value;
					this.SendPropertyChanged("super_set_id");
					this.Onsuper_set_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Docket_CaseStudyDocket", Storage="_CaseStudyDockets", ThisKey="id", OtherKey="docket_id")]
		public EntitySet<CaseStudyDocket> CaseStudyDockets
		{
			get
			{
				return this._CaseStudyDockets;
			}
			set
			{
				this._CaseStudyDockets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Docket_DocketProduct", Storage="_DocketProducts", ThisKey="id", OtherKey="docket_id")]
		public EntitySet<DocketProduct> DocketProducts
		{
			get
			{
				return this._DocketProducts;
			}
			set
			{
				this._DocketProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Docket_DocketReferenceSet", Storage="_DocketReferenceSets", ThisKey="id", OtherKey="docket_id")]
		public EntitySet<DocketReferenceSet> DocketReferenceSets
		{
			get
			{
				return this._DocketReferenceSets;
			}
			set
			{
				this._DocketReferenceSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Docket_DocketDocument", Storage="_DocketDocuments", ThisKey="id", OtherKey="docket_id")]
		public EntitySet<DocketDocument> DocketDocuments
		{
			get
			{
				return this._DocketDocuments;
			}
			set
			{
				this._DocketDocuments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Docket_Docucheck", Storage="_Docuchecks", ThisKey="id", OtherKey="docket_id")]
		public EntitySet<Docucheck> Docuchecks
		{
			get
			{
				return this._Docuchecks;
			}
			set
			{
				this._Docuchecks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SuperSet_Docket", Storage="_SuperSet", ThisKey="super_set_id", OtherKey="id", IsForeignKey=true)]
		public SuperSet SuperSet
		{
			get
			{
				return this._SuperSet.Entity;
			}
			set
			{
				SuperSet previousValue = this._SuperSet.Entity;
				if (((previousValue != value) 
							|| (this._SuperSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SuperSet.Entity = null;
						previousValue.Dockets.Remove(this);
					}
					this._SuperSet.Entity = value;
					if ((value != null))
					{
						value.Dockets.Add(this);
						this._super_set_id = value.id;
					}
					else
					{
						this._super_set_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("SuperSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CaseStudyDockets(CaseStudyDocket entity)
		{
			this.SendPropertyChanging();
			entity.Docket = this;
		}
		
		private void detach_CaseStudyDockets(CaseStudyDocket entity)
		{
			this.SendPropertyChanging();
			entity.Docket = null;
		}
		
		private void attach_DocketProducts(DocketProduct entity)
		{
			this.SendPropertyChanging();
			entity.Docket = this;
		}
		
		private void detach_DocketProducts(DocketProduct entity)
		{
			this.SendPropertyChanging();
			entity.Docket = null;
		}
		
		private void attach_DocketReferenceSets(DocketReferenceSet entity)
		{
			this.SendPropertyChanging();
			entity.Docket = this;
		}
		
		private void detach_DocketReferenceSets(DocketReferenceSet entity)
		{
			this.SendPropertyChanging();
			entity.Docket = null;
		}
		
		private void attach_DocketDocuments(DocketDocument entity)
		{
			this.SendPropertyChanging();
			entity.Docket = this;
		}
		
		private void detach_DocketDocuments(DocketDocument entity)
		{
			this.SendPropertyChanging();
			entity.Docket = null;
		}
		
		private void attach_Docuchecks(Docucheck entity)
		{
			this.SendPropertyChanging();
			entity.Docket = this;
		}
		
		private void detach_Docuchecks(Docucheck entity)
		{
			this.SendPropertyChanging();
			entity.Docket = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.reference_sets")]
	public partial class ReferenceSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<int> _super_set_id;
		
		private System.Nullable<bool> _correct;
		
		private EntitySet<DocketReferenceSet> _DocketReferenceSets;
		
		private EntitySet<Example> _Examples;
		
		private EntitySet<Docucheck> _Docuchecks;
		
		private EntityRef<SuperSet> _SuperSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onsuper_set_idChanging(System.Nullable<int> value);
    partial void Onsuper_set_idChanged();
    partial void OncorrectChanging(System.Nullable<bool> value);
    partial void OncorrectChanged();
    #endregion
		
		public ReferenceSet()
		{
			this._DocketReferenceSets = new EntitySet<DocketReferenceSet>(new Action<DocketReferenceSet>(this.attach_DocketReferenceSets), new Action<DocketReferenceSet>(this.detach_DocketReferenceSets));
			this._Examples = new EntitySet<Example>(new Action<Example>(this.attach_Examples), new Action<Example>(this.detach_Examples));
			this._Docuchecks = new EntitySet<Docucheck>(new Action<Docucheck>(this.attach_Docuchecks), new Action<Docucheck>(this.detach_Docuchecks));
			this._SuperSet = default(EntityRef<SuperSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_super_set_id", DbType="Int")]
		public System.Nullable<int> super_set_id
		{
			get
			{
				return this._super_set_id;
			}
			set
			{
				if ((this._super_set_id != value))
				{
					if (this._SuperSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsuper_set_idChanging(value);
					this.SendPropertyChanging();
					this._super_set_id = value;
					this.SendPropertyChanged("super_set_id");
					this.Onsuper_set_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_correct", DbType="Bit")]
		public System.Nullable<bool> correct
		{
			get
			{
				return this._correct;
			}
			set
			{
				if ((this._correct != value))
				{
					this.OncorrectChanging(value);
					this.SendPropertyChanging();
					this._correct = value;
					this.SendPropertyChanged("correct");
					this.OncorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReferenceSet_DocketReferenceSet", Storage="_DocketReferenceSets", ThisKey="id", OtherKey="reference_set_id")]
		public EntitySet<DocketReferenceSet> DocketReferenceSets
		{
			get
			{
				return this._DocketReferenceSets;
			}
			set
			{
				this._DocketReferenceSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReferenceSet_Example", Storage="_Examples", ThisKey="id", OtherKey="reference_set_id")]
		public EntitySet<Example> Examples
		{
			get
			{
				return this._Examples;
			}
			set
			{
				this._Examples.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReferenceSet_Docucheck", Storage="_Docuchecks", ThisKey="id", OtherKey="reference_set_id")]
		public EntitySet<Docucheck> Docuchecks
		{
			get
			{
				return this._Docuchecks;
			}
			set
			{
				this._Docuchecks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SuperSet_ReferenceSet", Storage="_SuperSet", ThisKey="super_set_id", OtherKey="id", IsForeignKey=true)]
		public SuperSet SuperSet
		{
			get
			{
				return this._SuperSet.Entity;
			}
			set
			{
				SuperSet previousValue = this._SuperSet.Entity;
				if (((previousValue != value) 
							|| (this._SuperSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SuperSet.Entity = null;
						previousValue.ReferenceSets.Remove(this);
					}
					this._SuperSet.Entity = value;
					if ((value != null))
					{
						value.ReferenceSets.Add(this);
						this._super_set_id = value.id;
					}
					else
					{
						this._super_set_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("SuperSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DocketReferenceSets(DocketReferenceSet entity)
		{
			this.SendPropertyChanging();
			entity.ReferenceSet = this;
		}
		
		private void detach_DocketReferenceSets(DocketReferenceSet entity)
		{
			this.SendPropertyChanging();
			entity.ReferenceSet = null;
		}
		
		private void attach_Examples(Example entity)
		{
			this.SendPropertyChanging();
			entity.ReferenceSet = this;
		}
		
		private void detach_Examples(Example entity)
		{
			this.SendPropertyChanging();
			entity.ReferenceSet = null;
		}
		
		private void attach_Docuchecks(Docucheck entity)
		{
			this.SendPropertyChanging();
			entity.ReferenceSet = this;
		}
		
		private void detach_Docuchecks(Docucheck entity)
		{
			this.SendPropertyChanging();
			entity.ReferenceSet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.dockets_documents")]
	public partial class DocketDocument : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _docket_id;
		
		private int _document_id;
		
		private System.Nullable<bool> _reference_document;
		
		private EntityRef<Docket> _Docket;
		
		private EntityRef<Document> _Document;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ondocket_idChanging(int value);
    partial void Ondocket_idChanged();
    partial void Ondocument_idChanging(int value);
    partial void Ondocument_idChanged();
    partial void Onreference_documentChanging(System.Nullable<bool> value);
    partial void Onreference_documentChanged();
    #endregion
		
		public DocketDocument()
		{
			this._Docket = default(EntityRef<Docket>);
			this._Document = default(EntityRef<Document>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_docket_id", DbType="Int NOT NULL")]
		public int docket_id
		{
			get
			{
				return this._docket_id;
			}
			set
			{
				if ((this._docket_id != value))
				{
					if (this._Docket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondocket_idChanging(value);
					this.SendPropertyChanging();
					this._docket_id = value;
					this.SendPropertyChanged("docket_id");
					this.Ondocket_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_document_id", DbType="Int NOT NULL")]
		public int document_id
		{
			get
			{
				return this._document_id;
			}
			set
			{
				if ((this._document_id != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondocument_idChanging(value);
					this.SendPropertyChanging();
					this._document_id = value;
					this.SendPropertyChanged("document_id");
					this.Ondocument_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reference_document", DbType="Bit")]
		public System.Nullable<bool> reference_document
		{
			get
			{
				return this._reference_document;
			}
			set
			{
				if ((this._reference_document != value))
				{
					this.Onreference_documentChanging(value);
					this.SendPropertyChanging();
					this._reference_document = value;
					this.SendPropertyChanged("reference_document");
					this.Onreference_documentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Docket_DocketDocument", Storage="_Docket", ThisKey="docket_id", OtherKey="id", IsForeignKey=true)]
		public Docket Docket
		{
			get
			{
				return this._Docket.Entity;
			}
			set
			{
				Docket previousValue = this._Docket.Entity;
				if (((previousValue != value) 
							|| (this._Docket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Docket.Entity = null;
						previousValue.DocketDocuments.Remove(this);
					}
					this._Docket.Entity = value;
					if ((value != null))
					{
						value.DocketDocuments.Add(this);
						this._docket_id = value.id;
					}
					else
					{
						this._docket_id = default(int);
					}
					this.SendPropertyChanged("Docket");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_DocketDocument", Storage="_Document", ThisKey="document_id", OtherKey="id", IsForeignKey=true)]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.DocketDocuments.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.DocketDocuments.Add(this);
						this._document_id = value.id;
					}
					else
					{
						this._document_id = default(int);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.pages")]
	public partial class Page : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _document_id;
		
		private string _name;
		
		private string _sample_file_name;
		
		private string _blank_form_file_name;
		
		private System.Nullable<int> _line_height;
		
		private System.Nullable<int> _sequence_number;
		
		private EntitySet<BlankSection> _BlankSections;
		
		private EntityRef<Document> _Document;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Ondocument_idChanging(System.Nullable<int> value);
    partial void Ondocument_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onsample_file_nameChanging(string value);
    partial void Onsample_file_nameChanged();
    partial void Onblank_form_file_nameChanging(string value);
    partial void Onblank_form_file_nameChanged();
    partial void Online_heightChanging(System.Nullable<int> value);
    partial void Online_heightChanged();
    partial void Onsequence_numberChanging(System.Nullable<int> value);
    partial void Onsequence_numberChanged();
    #endregion
		
		public Page()
		{
			this._BlankSections = new EntitySet<BlankSection>(new Action<BlankSection>(this.attach_BlankSections), new Action<BlankSection>(this.detach_BlankSections));
			this._Document = default(EntityRef<Document>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_document_id", DbType="Int")]
		public System.Nullable<int> document_id
		{
			get
			{
				return this._document_id;
			}
			set
			{
				if ((this._document_id != value))
				{
					if (this._Document.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondocument_idChanging(value);
					this.SendPropertyChanging();
					this._document_id = value;
					this.SendPropertyChanged("document_id");
					this.Ondocument_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sample_file_name", DbType="VarChar(255)")]
		public string sample_file_name
		{
			get
			{
				return this._sample_file_name;
			}
			set
			{
				if ((this._sample_file_name != value))
				{
					this.Onsample_file_nameChanging(value);
					this.SendPropertyChanging();
					this._sample_file_name = value;
					this.SendPropertyChanged("sample_file_name");
					this.Onsample_file_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_blank_form_file_name", DbType="VarChar(255)")]
		public string blank_form_file_name
		{
			get
			{
				return this._blank_form_file_name;
			}
			set
			{
				if ((this._blank_form_file_name != value))
				{
					this.Onblank_form_file_nameChanging(value);
					this.SendPropertyChanging();
					this._blank_form_file_name = value;
					this.SendPropertyChanged("blank_form_file_name");
					this.Onblank_form_file_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_line_height", DbType="Int")]
		public System.Nullable<int> line_height
		{
			get
			{
				return this._line_height;
			}
			set
			{
				if ((this._line_height != value))
				{
					this.Online_heightChanging(value);
					this.SendPropertyChanging();
					this._line_height = value;
					this.SendPropertyChanged("line_height");
					this.Online_heightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sequence_number", DbType="Int")]
		public System.Nullable<int> sequence_number
		{
			get
			{
				return this._sequence_number;
			}
			set
			{
				if ((this._sequence_number != value))
				{
					this.Onsequence_numberChanging(value);
					this.SendPropertyChanging();
					this._sequence_number = value;
					this.SendPropertyChanged("sequence_number");
					this.Onsequence_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Page_BlankSection", Storage="_BlankSections", ThisKey="id", OtherKey="page_id")]
		public EntitySet<BlankSection> BlankSections
		{
			get
			{
				return this._BlankSections;
			}
			set
			{
				this._BlankSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Page", Storage="_Document", ThisKey="document_id", OtherKey="id", IsForeignKey=true)]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.Pages.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.Pages.Add(this);
						this._document_id = value.id;
					}
					else
					{
						this._document_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BlankSections(BlankSection entity)
		{
			this.SendPropertyChanging();
			entity.Page = this;
		}
		
		private void detach_BlankSections(BlankSection entity)
		{
			this.SendPropertyChanging();
			entity.Page = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.examples")]
	public partial class Example : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _component_id;
		
		private System.Nullable<int> _reference_set_id;
		
		private string _example_image_file_name;
		
		private System.Nullable<bool> _is_image;
		
		private string _text_content;
		
		private EntitySet<FilledSection> _FilledSections;
		
		private EntityRef<Component> _Component;
		
		private EntityRef<ReferenceSet> _ReferenceSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Oncomponent_idChanging(System.Nullable<int> value);
    partial void Oncomponent_idChanged();
    partial void Onreference_set_idChanging(System.Nullable<int> value);
    partial void Onreference_set_idChanged();
    partial void Onexample_image_file_nameChanging(string value);
    partial void Onexample_image_file_nameChanged();
    partial void Onis_imageChanging(System.Nullable<bool> value);
    partial void Onis_imageChanged();
    partial void Ontext_contentChanging(string value);
    partial void Ontext_contentChanged();
    #endregion
		
		public Example()
		{
			this._FilledSections = new EntitySet<FilledSection>(new Action<FilledSection>(this.attach_FilledSections), new Action<FilledSection>(this.detach_FilledSections));
			this._Component = default(EntityRef<Component>);
			this._ReferenceSet = default(EntityRef<ReferenceSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_component_id", DbType="Int")]
		public System.Nullable<int> component_id
		{
			get
			{
				return this._component_id;
			}
			set
			{
				if ((this._component_id != value))
				{
					if (this._Component.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncomponent_idChanging(value);
					this.SendPropertyChanging();
					this._component_id = value;
					this.SendPropertyChanged("component_id");
					this.Oncomponent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reference_set_id", DbType="Int")]
		public System.Nullable<int> reference_set_id
		{
			get
			{
				return this._reference_set_id;
			}
			set
			{
				if ((this._reference_set_id != value))
				{
					if (this._ReferenceSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onreference_set_idChanging(value);
					this.SendPropertyChanging();
					this._reference_set_id = value;
					this.SendPropertyChanged("reference_set_id");
					this.Onreference_set_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_example_image_file_name", DbType="VarChar(255)")]
		public string example_image_file_name
		{
			get
			{
				return this._example_image_file_name;
			}
			set
			{
				if ((this._example_image_file_name != value))
				{
					this.Onexample_image_file_nameChanging(value);
					this.SendPropertyChanging();
					this._example_image_file_name = value;
					this.SendPropertyChanged("example_image_file_name");
					this.Onexample_image_file_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_image", DbType="Bit")]
		public System.Nullable<bool> is_image
		{
			get
			{
				return this._is_image;
			}
			set
			{
				if ((this._is_image != value))
				{
					this.Onis_imageChanging(value);
					this.SendPropertyChanging();
					this._is_image = value;
					this.SendPropertyChanged("is_image");
					this.Onis_imageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text_content", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string text_content
		{
			get
			{
				return this._text_content;
			}
			set
			{
				if ((this._text_content != value))
				{
					this.Ontext_contentChanging(value);
					this.SendPropertyChanging();
					this._text_content = value;
					this.SendPropertyChanged("text_content");
					this.Ontext_contentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Example_FilledSection", Storage="_FilledSections", ThisKey="id", OtherKey="example_id")]
		public EntitySet<FilledSection> FilledSections
		{
			get
			{
				return this._FilledSections;
			}
			set
			{
				this._FilledSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Component_Example", Storage="_Component", ThisKey="component_id", OtherKey="id", IsForeignKey=true)]
		public Component Component
		{
			get
			{
				return this._Component.Entity;
			}
			set
			{
				Component previousValue = this._Component.Entity;
				if (((previousValue != value) 
							|| (this._Component.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Component.Entity = null;
						previousValue.Examples.Remove(this);
					}
					this._Component.Entity = value;
					if ((value != null))
					{
						value.Examples.Add(this);
						this._component_id = value.id;
					}
					else
					{
						this._component_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Component");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReferenceSet_Example", Storage="_ReferenceSet", ThisKey="reference_set_id", OtherKey="id", IsForeignKey=true)]
		public ReferenceSet ReferenceSet
		{
			get
			{
				return this._ReferenceSet.Entity;
			}
			set
			{
				ReferenceSet previousValue = this._ReferenceSet.Entity;
				if (((previousValue != value) 
							|| (this._ReferenceSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReferenceSet.Entity = null;
						previousValue.Examples.Remove(this);
					}
					this._ReferenceSet.Entity = value;
					if ((value != null))
					{
						value.Examples.Add(this);
						this._reference_set_id = value.id;
					}
					else
					{
						this._reference_set_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("ReferenceSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FilledSections(FilledSection entity)
		{
			this.SendPropertyChanging();
			entity.Example = this;
		}
		
		private void detach_FilledSections(FilledSection entity)
		{
			this.SendPropertyChanging();
			entity.Example = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.quizzes")]
	public partial class Quiz : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<bool> _isonline;
		
		private System.Nullable<int> _level_id;
		
		private EntitySet<QuizQuestion> _QuizQuestions;
		
		private EntitySet<CaseStudyQuiz> _CaseStudyQuizs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnisonlineChanging(System.Nullable<bool> value);
    partial void OnisonlineChanged();
    partial void Onlevel_idChanging(System.Nullable<int> value);
    partial void Onlevel_idChanged();
    #endregion
		
		public Quiz()
		{
			this._QuizQuestions = new EntitySet<QuizQuestion>(new Action<QuizQuestion>(this.attach_QuizQuestions), new Action<QuizQuestion>(this.detach_QuizQuestions));
			this._CaseStudyQuizs = new EntitySet<CaseStudyQuiz>(new Action<CaseStudyQuiz>(this.attach_CaseStudyQuizs), new Action<CaseStudyQuiz>(this.detach_CaseStudyQuizs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isonline", DbType="Bit")]
		public System.Nullable<bool> isonline
		{
			get
			{
				return this._isonline;
			}
			set
			{
				if ((this._isonline != value))
				{
					this.OnisonlineChanging(value);
					this.SendPropertyChanging();
					this._isonline = value;
					this.SendPropertyChanged("isonline");
					this.OnisonlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_level_id", DbType="Int")]
		public System.Nullable<int> level_id
		{
			get
			{
				return this._level_id;
			}
			set
			{
				if ((this._level_id != value))
				{
					this.Onlevel_idChanging(value);
					this.SendPropertyChanging();
					this._level_id = value;
					this.SendPropertyChanged("level_id");
					this.Onlevel_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quiz_QuizQuestion", Storage="_QuizQuestions", ThisKey="id", OtherKey="quiz_id")]
		public EntitySet<QuizQuestion> QuizQuestions
		{
			get
			{
				return this._QuizQuestions;
			}
			set
			{
				this._QuizQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quiz_CaseStudyQuiz", Storage="_CaseStudyQuizs", ThisKey="id", OtherKey="quiz_id")]
		public EntitySet<CaseStudyQuiz> CaseStudyQuizs
		{
			get
			{
				return this._CaseStudyQuizs;
			}
			set
			{
				this._CaseStudyQuizs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuizQuestions(QuizQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Quiz = this;
		}
		
		private void detach_QuizQuestions(QuizQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Quiz = null;
		}
		
		private void attach_CaseStudyQuizs(CaseStudyQuiz entity)
		{
			this.SendPropertyChanging();
			entity.Quiz = this;
		}
		
		private void detach_CaseStudyQuizs(CaseStudyQuiz entity)
		{
			this.SendPropertyChanging();
			entity.Quiz = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.questions")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _question_type_id;
		
		private string _question_content;
		
		private EntitySet<QuizQuestion> _QuizQuestions;
		
		private EntitySet<AnswerChoice> _AnswerChoices;
		
		private EntitySet<Response> _Responses;
		
		private EntityRef<QuestionType> _QuestionType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onquestion_type_idChanging(System.Nullable<int> value);
    partial void Onquestion_type_idChanged();
    partial void Onquestion_contentChanging(string value);
    partial void Onquestion_contentChanged();
    #endregion
		
		public Question()
		{
			this._QuizQuestions = new EntitySet<QuizQuestion>(new Action<QuizQuestion>(this.attach_QuizQuestions), new Action<QuizQuestion>(this.detach_QuizQuestions));
			this._AnswerChoices = new EntitySet<AnswerChoice>(new Action<AnswerChoice>(this.attach_AnswerChoices), new Action<AnswerChoice>(this.detach_AnswerChoices));
			this._Responses = new EntitySet<Response>(new Action<Response>(this.attach_Responses), new Action<Response>(this.detach_Responses));
			this._QuestionType = default(EntityRef<QuestionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_question_type_id", DbType="Int")]
		public System.Nullable<int> question_type_id
		{
			get
			{
				return this._question_type_id;
			}
			set
			{
				if ((this._question_type_id != value))
				{
					if (this._QuestionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onquestion_type_idChanging(value);
					this.SendPropertyChanging();
					this._question_type_id = value;
					this.SendPropertyChanged("question_type_id");
					this.Onquestion_type_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_question_content", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string question_content
		{
			get
			{
				return this._question_content;
			}
			set
			{
				if ((this._question_content != value))
				{
					this.Onquestion_contentChanging(value);
					this.SendPropertyChanging();
					this._question_content = value;
					this.SendPropertyChanged("question_content");
					this.Onquestion_contentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_QuizQuestion", Storage="_QuizQuestions", ThisKey="id", OtherKey="question_id")]
		public EntitySet<QuizQuestion> QuizQuestions
		{
			get
			{
				return this._QuizQuestions;
			}
			set
			{
				this._QuizQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_AnswerChoice", Storage="_AnswerChoices", ThisKey="id", OtherKey="question_id")]
		public EntitySet<AnswerChoice> AnswerChoices
		{
			get
			{
				return this._AnswerChoices;
			}
			set
			{
				this._AnswerChoices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Response", Storage="_Responses", ThisKey="id", OtherKey="question_id")]
		public EntitySet<Response> Responses
		{
			get
			{
				return this._Responses;
			}
			set
			{
				this._Responses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionType_Question", Storage="_QuestionType", ThisKey="question_type_id", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public QuestionType QuestionType
		{
			get
			{
				return this._QuestionType.Entity;
			}
			set
			{
				QuestionType previousValue = this._QuestionType.Entity;
				if (((previousValue != value) 
							|| (this._QuestionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QuestionType.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._QuestionType.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._question_type_id = value.id;
					}
					else
					{
						this._question_type_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("QuestionType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuizQuestions(QuizQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_QuizQuestions(QuizQuestion entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_AnswerChoices(AnswerChoice entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_AnswerChoices(AnswerChoice entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_Responses(Response entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Responses(Response entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.question_types")]
	public partial class QuestionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<Question> _Questions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public QuestionType()
		{
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QuestionType_Question", Storage="_Questions", ThisKey="id", OtherKey="question_type_id")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.QuestionType = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.QuestionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.quiz_questions")]
	public partial class QuizQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _quiz_id;
		
		private System.Nullable<int> _question_id;
		
		private EntityRef<Question> _Question;
		
		private EntityRef<Quiz> _Quiz;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onquiz_idChanging(System.Nullable<int> value);
    partial void Onquiz_idChanged();
    partial void Onquestion_idChanging(System.Nullable<int> value);
    partial void Onquestion_idChanged();
    #endregion
		
		public QuizQuestion()
		{
			this._Question = default(EntityRef<Question>);
			this._Quiz = default(EntityRef<Quiz>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quiz_id", DbType="Int")]
		public System.Nullable<int> quiz_id
		{
			get
			{
				return this._quiz_id;
			}
			set
			{
				if ((this._quiz_id != value))
				{
					if (this._Quiz.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onquiz_idChanging(value);
					this.SendPropertyChanging();
					this._quiz_id = value;
					this.SendPropertyChanged("quiz_id");
					this.Onquiz_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_question_id", DbType="Int")]
		public System.Nullable<int> question_id
		{
			get
			{
				return this._question_id;
			}
			set
			{
				if ((this._question_id != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onquestion_idChanging(value);
					this.SendPropertyChanging();
					this._question_id = value;
					this.SendPropertyChanged("question_id");
					this.Onquestion_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_QuizQuestion", Storage="_Question", ThisKey="question_id", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.QuizQuestions.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.QuizQuestions.Add(this);
						this._question_id = value.id;
					}
					else
					{
						this._question_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quiz_QuizQuestion", Storage="_Quiz", ThisKey="quiz_id", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Quiz Quiz
		{
			get
			{
				return this._Quiz.Entity;
			}
			set
			{
				Quiz previousValue = this._Quiz.Entity;
				if (((previousValue != value) 
							|| (this._Quiz.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quiz.Entity = null;
						previousValue.QuizQuestions.Remove(this);
					}
					this._Quiz.Entity = value;
					if ((value != null))
					{
						value.QuizQuestions.Add(this);
						this._quiz_id = value.id;
					}
					else
					{
						this._quiz_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Quiz");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.case_studies_quizzes")]
	public partial class CaseStudyQuiz : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _case_study_id;
		
		private System.Nullable<int> _quiz_id;
		
		private EntityRef<Quiz> _Quiz;
		
		private EntityRef<CaseStudy> _CaseStudy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Oncase_study_idChanging(System.Nullable<int> value);
    partial void Oncase_study_idChanged();
    partial void Onquiz_idChanging(System.Nullable<int> value);
    partial void Onquiz_idChanged();
    #endregion
		
		public CaseStudyQuiz()
		{
			this._Quiz = default(EntityRef<Quiz>);
			this._CaseStudy = default(EntityRef<CaseStudy>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_case_study_id", DbType="Int")]
		public System.Nullable<int> case_study_id
		{
			get
			{
				return this._case_study_id;
			}
			set
			{
				if ((this._case_study_id != value))
				{
					if (this._CaseStudy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncase_study_idChanging(value);
					this.SendPropertyChanging();
					this._case_study_id = value;
					this.SendPropertyChanged("case_study_id");
					this.Oncase_study_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quiz_id", DbType="Int")]
		public System.Nullable<int> quiz_id
		{
			get
			{
				return this._quiz_id;
			}
			set
			{
				if ((this._quiz_id != value))
				{
					if (this._Quiz.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onquiz_idChanging(value);
					this.SendPropertyChanging();
					this._quiz_id = value;
					this.SendPropertyChanged("quiz_id");
					this.Onquiz_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Quiz_CaseStudyQuiz", Storage="_Quiz", ThisKey="quiz_id", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Quiz Quiz
		{
			get
			{
				return this._Quiz.Entity;
			}
			set
			{
				Quiz previousValue = this._Quiz.Entity;
				if (((previousValue != value) 
							|| (this._Quiz.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Quiz.Entity = null;
						previousValue.CaseStudyQuizs.Remove(this);
					}
					this._Quiz.Entity = value;
					if ((value != null))
					{
						value.CaseStudyQuizs.Add(this);
						this._quiz_id = value.id;
					}
					else
					{
						this._quiz_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Quiz");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CaseStudy_CaseStudyQuiz", Storage="_CaseStudy", ThisKey="case_study_id", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public CaseStudy CaseStudy
		{
			get
			{
				return this._CaseStudy.Entity;
			}
			set
			{
				CaseStudy previousValue = this._CaseStudy.Entity;
				if (((previousValue != value) 
							|| (this._CaseStudy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CaseStudy.Entity = null;
						previousValue.CaseStudyQuizs.Remove(this);
					}
					this._CaseStudy.Entity = value;
					if ((value != null))
					{
						value.CaseStudyQuizs.Add(this);
						this._case_study_id = value.id;
					}
					else
					{
						this._case_study_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("CaseStudy");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.answer_choices")]
	public partial class AnswerChoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _answer_content;
		
		private System.Nullable<bool> _correct;
		
		private System.Nullable<int> _question_id;
		
		private EntityRef<Question> _Question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onanswer_contentChanging(string value);
    partial void Onanswer_contentChanged();
    partial void OncorrectChanging(System.Nullable<bool> value);
    partial void OncorrectChanged();
    partial void Onquestion_idChanging(System.Nullable<int> value);
    partial void Onquestion_idChanged();
    #endregion
		
		public AnswerChoice()
		{
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answer_content", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string answer_content
		{
			get
			{
				return this._answer_content;
			}
			set
			{
				if ((this._answer_content != value))
				{
					this.Onanswer_contentChanging(value);
					this.SendPropertyChanging();
					this._answer_content = value;
					this.SendPropertyChanged("answer_content");
					this.Onanswer_contentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_correct", DbType="Bit")]
		public System.Nullable<bool> correct
		{
			get
			{
				return this._correct;
			}
			set
			{
				if ((this._correct != value))
				{
					this.OncorrectChanging(value);
					this.SendPropertyChanging();
					this._correct = value;
					this.SendPropertyChanged("correct");
					this.OncorrectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_question_id", DbType="Int")]
		public System.Nullable<int> question_id
		{
			get
			{
				return this._question_id;
			}
			set
			{
				if ((this._question_id != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onquestion_idChanging(value);
					this.SendPropertyChanging();
					this._question_id = value;
					this.SendPropertyChanged("question_id");
					this.Onquestion_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_AnswerChoice", Storage="_Question", ThisKey="question_id", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.AnswerChoices.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.AnswerChoices.Add(this);
						this._question_id = value.id;
					}
					else
					{
						this._question_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.responses")]
	public partial class Response : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _response_content;
		
		private System.Nullable<int> _question_id;
		
		private System.Nullable<int> _assignment_id;
		
		private EntityRef<Question> _Question;
		
		private EntityRef<Assignment> _Assignment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onresponse_contentChanging(string value);
    partial void Onresponse_contentChanged();
    partial void Onquestion_idChanging(System.Nullable<int> value);
    partial void Onquestion_idChanged();
    partial void Onassignment_idChanging(System.Nullable<int> value);
    partial void Onassignment_idChanged();
    #endregion
		
		public Response()
		{
			this._Question = default(EntityRef<Question>);
			this._Assignment = default(EntityRef<Assignment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_response_content", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string response_content
		{
			get
			{
				return this._response_content;
			}
			set
			{
				if ((this._response_content != value))
				{
					this.Onresponse_contentChanging(value);
					this.SendPropertyChanging();
					this._response_content = value;
					this.SendPropertyChanged("response_content");
					this.Onresponse_contentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_question_id", DbType="Int")]
		public System.Nullable<int> question_id
		{
			get
			{
				return this._question_id;
			}
			set
			{
				if ((this._question_id != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onquestion_idChanging(value);
					this.SendPropertyChanging();
					this._question_id = value;
					this.SendPropertyChanged("question_id");
					this.Onquestion_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assignment_id", DbType="Int")]
		public System.Nullable<int> assignment_id
		{
			get
			{
				return this._assignment_id;
			}
			set
			{
				if ((this._assignment_id != value))
				{
					if (this._Assignment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onassignment_idChanging(value);
					this.SendPropertyChanging();
					this._assignment_id = value;
					this.SendPropertyChanged("assignment_id");
					this.Onassignment_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Response", Storage="_Question", ThisKey="question_id", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Responses.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Responses.Add(this);
						this._question_id = value.id;
					}
					else
					{
						this._question_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assignment_Response", Storage="_Assignment", ThisKey="assignment_id", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Assignment Assignment
		{
			get
			{
				return this._Assignment.Entity;
			}
			set
			{
				Assignment previousValue = this._Assignment.Entity;
				if (((previousValue != value) 
							|| (this._Assignment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Assignment.Entity = null;
						previousValue.Responses.Remove(this);
					}
					this._Assignment.Entity = value;
					if ((value != null))
					{
						value.Responses.Add(this);
						this._assignment_id = value.id;
					}
					else
					{
						this._assignment_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Assignment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.case_studies")]
	public partial class CaseStudy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _briefing;
		
		private EntitySet<CaseStudyDocket> _CaseStudyDockets;
		
		private EntitySet<CaseStudyTag> _CaseStudyTags;
		
		private EntitySet<CaseStudyQuiz> _CaseStudyQuizs;
		
		private EntitySet<Assignment> _Assignments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnbriefingChanging(string value);
    partial void OnbriefingChanged();
    #endregion
		
		public CaseStudy()
		{
			this._CaseStudyDockets = new EntitySet<CaseStudyDocket>(new Action<CaseStudyDocket>(this.attach_CaseStudyDockets), new Action<CaseStudyDocket>(this.detach_CaseStudyDockets));
			this._CaseStudyTags = new EntitySet<CaseStudyTag>(new Action<CaseStudyTag>(this.attach_CaseStudyTags), new Action<CaseStudyTag>(this.detach_CaseStudyTags));
			this._CaseStudyQuizs = new EntitySet<CaseStudyQuiz>(new Action<CaseStudyQuiz>(this.attach_CaseStudyQuizs), new Action<CaseStudyQuiz>(this.detach_CaseStudyQuizs));
			this._Assignments = new EntitySet<Assignment>(new Action<Assignment>(this.attach_Assignments), new Action<Assignment>(this.detach_Assignments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_briefing", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string briefing
		{
			get
			{
				return this._briefing;
			}
			set
			{
				if ((this._briefing != value))
				{
					this.OnbriefingChanging(value);
					this.SendPropertyChanging();
					this._briefing = value;
					this.SendPropertyChanged("briefing");
					this.OnbriefingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CaseStudy_CaseStudyDocket", Storage="_CaseStudyDockets", ThisKey="id", OtherKey="case_study_id")]
		public EntitySet<CaseStudyDocket> CaseStudyDockets
		{
			get
			{
				return this._CaseStudyDockets;
			}
			set
			{
				this._CaseStudyDockets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CaseStudy_CaseStudyTag", Storage="_CaseStudyTags", ThisKey="id", OtherKey="case_study_id")]
		public EntitySet<CaseStudyTag> CaseStudyTags
		{
			get
			{
				return this._CaseStudyTags;
			}
			set
			{
				this._CaseStudyTags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CaseStudy_CaseStudyQuiz", Storage="_CaseStudyQuizs", ThisKey="id", OtherKey="case_study_id")]
		public EntitySet<CaseStudyQuiz> CaseStudyQuizs
		{
			get
			{
				return this._CaseStudyQuizs;
			}
			set
			{
				this._CaseStudyQuizs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CaseStudy_Assignment", Storage="_Assignments", ThisKey="id", OtherKey="case_study_id")]
		public EntitySet<Assignment> Assignments
		{
			get
			{
				return this._Assignments;
			}
			set
			{
				this._Assignments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CaseStudyDockets(CaseStudyDocket entity)
		{
			this.SendPropertyChanging();
			entity.CaseStudy = this;
		}
		
		private void detach_CaseStudyDockets(CaseStudyDocket entity)
		{
			this.SendPropertyChanging();
			entity.CaseStudy = null;
		}
		
		private void attach_CaseStudyTags(CaseStudyTag entity)
		{
			this.SendPropertyChanging();
			entity.CaseStudy = this;
		}
		
		private void detach_CaseStudyTags(CaseStudyTag entity)
		{
			this.SendPropertyChanging();
			entity.CaseStudy = null;
		}
		
		private void attach_CaseStudyQuizs(CaseStudyQuiz entity)
		{
			this.SendPropertyChanging();
			entity.CaseStudy = this;
		}
		
		private void detach_CaseStudyQuizs(CaseStudyQuiz entity)
		{
			this.SendPropertyChanging();
			entity.CaseStudy = null;
		}
		
		private void attach_Assignments(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.CaseStudy = this;
		}
		
		private void detach_Assignments(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.CaseStudy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.students")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _username;
		
		private System.Nullable<System.DateTime> _first_visit;
		
		private int _time_spend;
		
		private System.Nullable<System.Guid> _unique_id;
		
		private EntitySet<Assignment> _Assignments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void Onfirst_visitChanging(System.Nullable<System.DateTime> value);
    partial void Onfirst_visitChanged();
    partial void Ontime_spendChanging(int value);
    partial void Ontime_spendChanged();
    partial void Onunique_idChanging(System.Nullable<System.Guid> value);
    partial void Onunique_idChanged();
    #endregion
		
		public Student()
		{
			this._Assignments = new EntitySet<Assignment>(new Action<Assignment>(this.attach_Assignments), new Action<Assignment>(this.detach_Assignments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="NVarChar(50)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_first_visit", DbType="DateTime")]
		public System.Nullable<System.DateTime> first_visit
		{
			get
			{
				return this._first_visit;
			}
			set
			{
				if ((this._first_visit != value))
				{
					this.Onfirst_visitChanging(value);
					this.SendPropertyChanging();
					this._first_visit = value;
					this.SendPropertyChanged("first_visit");
					this.Onfirst_visitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time_spend", DbType="Int NOT NULL")]
		public int time_spend
		{
			get
			{
				return this._time_spend;
			}
			set
			{
				if ((this._time_spend != value))
				{
					this.Ontime_spendChanging(value);
					this.SendPropertyChanging();
					this._time_spend = value;
					this.SendPropertyChanged("time_spend");
					this.Ontime_spendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unique_id", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> unique_id
		{
			get
			{
				return this._unique_id;
			}
			set
			{
				if ((this._unique_id != value))
				{
					this.Onunique_idChanging(value);
					this.SendPropertyChanging();
					this._unique_id = value;
					this.SendPropertyChanged("unique_id");
					this.Onunique_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Assignment", Storage="_Assignments", ThisKey="id", OtherKey="student_id")]
		public EntitySet<Assignment> Assignments
		{
			get
			{
				return this._Assignments;
			}
			set
			{
				this._Assignments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assignments(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Assignments(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.assignments")]
	public partial class Assignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _student_id;
		
		private int _case_study_id;
		
		private int _level_id;
		
		private bool _istest;
		
		private bool _ispractice;
		
		private bool _iscomplete;
		
		private double _score;
		
		private EntitySet<Response> _Responses;
		
		private EntitySet<Docucheck> _Docuchecks;
		
		private EntityRef<CaseStudy> _CaseStudy;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<Level> _Level;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onstudent_idChanging(int value);
    partial void Onstudent_idChanged();
    partial void Oncase_study_idChanging(int value);
    partial void Oncase_study_idChanged();
    partial void Onlevel_idChanging(int value);
    partial void Onlevel_idChanged();
    partial void OnistestChanging(bool value);
    partial void OnistestChanged();
    partial void OnispracticeChanging(bool value);
    partial void OnispracticeChanged();
    partial void OniscompleteChanging(bool value);
    partial void OniscompleteChanged();
    partial void OnscoreChanging(double value);
    partial void OnscoreChanged();
    #endregion
		
		public Assignment()
		{
			this._Responses = new EntitySet<Response>(new Action<Response>(this.attach_Responses), new Action<Response>(this.detach_Responses));
			this._Docuchecks = new EntitySet<Docucheck>(new Action<Docucheck>(this.attach_Docuchecks), new Action<Docucheck>(this.detach_Docuchecks));
			this._CaseStudy = default(EntityRef<CaseStudy>);
			this._Student = default(EntityRef<Student>);
			this._Level = default(EntityRef<Level>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_student_id", DbType="Int NOT NULL")]
		public int student_id
		{
			get
			{
				return this._student_id;
			}
			set
			{
				if ((this._student_id != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstudent_idChanging(value);
					this.SendPropertyChanging();
					this._student_id = value;
					this.SendPropertyChanged("student_id");
					this.Onstudent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_case_study_id", DbType="Int NOT NULL")]
		public int case_study_id
		{
			get
			{
				return this._case_study_id;
			}
			set
			{
				if ((this._case_study_id != value))
				{
					if (this._CaseStudy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncase_study_idChanging(value);
					this.SendPropertyChanging();
					this._case_study_id = value;
					this.SendPropertyChanged("case_study_id");
					this.Oncase_study_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_level_id", DbType="Int NOT NULL")]
		public int level_id
		{
			get
			{
				return this._level_id;
			}
			set
			{
				if ((this._level_id != value))
				{
					if (this._Level.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onlevel_idChanging(value);
					this.SendPropertyChanging();
					this._level_id = value;
					this.SendPropertyChanged("level_id");
					this.Onlevel_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_istest", DbType="Bit NOT NULL")]
		public bool istest
		{
			get
			{
				return this._istest;
			}
			set
			{
				if ((this._istest != value))
				{
					this.OnistestChanging(value);
					this.SendPropertyChanging();
					this._istest = value;
					this.SendPropertyChanged("istest");
					this.OnistestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ispractice", DbType="Bit NOT NULL")]
		public bool ispractice
		{
			get
			{
				return this._ispractice;
			}
			set
			{
				if ((this._ispractice != value))
				{
					this.OnispracticeChanging(value);
					this.SendPropertyChanging();
					this._ispractice = value;
					this.SendPropertyChanged("ispractice");
					this.OnispracticeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iscomplete", DbType="Bit NOT NULL")]
		public bool iscomplete
		{
			get
			{
				return this._iscomplete;
			}
			set
			{
				if ((this._iscomplete != value))
				{
					this.OniscompleteChanging(value);
					this.SendPropertyChanging();
					this._iscomplete = value;
					this.SendPropertyChanged("iscomplete");
					this.OniscompleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_score", DbType="Float NOT NULL")]
		public double score
		{
			get
			{
				return this._score;
			}
			set
			{
				if ((this._score != value))
				{
					this.OnscoreChanging(value);
					this.SendPropertyChanging();
					this._score = value;
					this.SendPropertyChanged("score");
					this.OnscoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assignment_Response", Storage="_Responses", ThisKey="id", OtherKey="assignment_id")]
		public EntitySet<Response> Responses
		{
			get
			{
				return this._Responses;
			}
			set
			{
				this._Responses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assignment_Docucheck", Storage="_Docuchecks", ThisKey="id", OtherKey="document_id")]
		public EntitySet<Docucheck> Docuchecks
		{
			get
			{
				return this._Docuchecks;
			}
			set
			{
				this._Docuchecks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CaseStudy_Assignment", Storage="_CaseStudy", ThisKey="case_study_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CaseStudy CaseStudy
		{
			get
			{
				return this._CaseStudy.Entity;
			}
			set
			{
				CaseStudy previousValue = this._CaseStudy.Entity;
				if (((previousValue != value) 
							|| (this._CaseStudy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CaseStudy.Entity = null;
						previousValue.Assignments.Remove(this);
					}
					this._CaseStudy.Entity = value;
					if ((value != null))
					{
						value.Assignments.Add(this);
						this._case_study_id = value.id;
					}
					else
					{
						this._case_study_id = default(int);
					}
					this.SendPropertyChanged("CaseStudy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Assignment", Storage="_Student", ThisKey="student_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Assignments.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Assignments.Add(this);
						this._student_id = value.id;
					}
					else
					{
						this._student_id = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="level_Assignment", Storage="_Level", ThisKey="level_id", OtherKey="id", IsForeignKey=true)]
		public Level Level
		{
			get
			{
				return this._Level.Entity;
			}
			set
			{
				Level previousValue = this._Level.Entity;
				if (((previousValue != value) 
							|| (this._Level.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Level.Entity = null;
						previousValue.Assignments.Remove(this);
					}
					this._Level.Entity = value;
					if ((value != null))
					{
						value.Assignments.Add(this);
						this._level_id = value.id;
					}
					else
					{
						this._level_id = default(int);
					}
					this.SendPropertyChanged("Level");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Responses(Response entity)
		{
			this.SendPropertyChanging();
			entity.Assignment = this;
		}
		
		private void detach_Responses(Response entity)
		{
			this.SendPropertyChanging();
			entity.Assignment = null;
		}
		
		private void attach_Docuchecks(Docucheck entity)
		{
			this.SendPropertyChanging();
			entity.Assignment = this;
		}
		
		private void detach_Docuchecks(Docucheck entity)
		{
			this.SendPropertyChanging();
			entity.Assignment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.docuchecks")]
	public partial class Docucheck : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _assignment_id;
		
		private System.Nullable<int> _reference_set_id;
		
		private System.Nullable<int> _score;
		
		private System.Nullable<bool> _played;
		
		private System.Nullable<int> _docket_id;
		
		private System.Nullable<int> _document_id;
		
		private EntitySet<FilledSection> _FilledSections;
		
		private EntityRef<Assignment> _Assignment;
		
		private EntityRef<Docket> _Docket;
		
		private EntityRef<Document> _Document;
		
		private EntityRef<ReferenceSet> _ReferenceSet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onassignment_idChanging(System.Nullable<int> value);
    partial void Onassignment_idChanged();
    partial void Onreference_set_idChanging(System.Nullable<int> value);
    partial void Onreference_set_idChanged();
    partial void OnscoreChanging(System.Nullable<int> value);
    partial void OnscoreChanged();
    partial void OnplayedChanging(System.Nullable<bool> value);
    partial void OnplayedChanged();
    partial void Ondocket_idChanging(System.Nullable<int> value);
    partial void Ondocket_idChanged();
    partial void Ondocument_idChanging(System.Nullable<int> value);
    partial void Ondocument_idChanged();
    #endregion
		
		public Docucheck()
		{
			this._FilledSections = new EntitySet<FilledSection>(new Action<FilledSection>(this.attach_FilledSections), new Action<FilledSection>(this.detach_FilledSections));
			this._Assignment = default(EntityRef<Assignment>);
			this._Docket = default(EntityRef<Docket>);
			this._Document = default(EntityRef<Document>);
			this._ReferenceSet = default(EntityRef<ReferenceSet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_assignment_id", DbType="Int")]
		public System.Nullable<int> assignment_id
		{
			get
			{
				return this._assignment_id;
			}
			set
			{
				if ((this._assignment_id != value))
				{
					this.Onassignment_idChanging(value);
					this.SendPropertyChanging();
					this._assignment_id = value;
					this.SendPropertyChanged("assignment_id");
					this.Onassignment_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reference_set_id", DbType="Int")]
		public System.Nullable<int> reference_set_id
		{
			get
			{
				return this._reference_set_id;
			}
			set
			{
				if ((this._reference_set_id != value))
				{
					if (this._ReferenceSet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onreference_set_idChanging(value);
					this.SendPropertyChanging();
					this._reference_set_id = value;
					this.SendPropertyChanged("reference_set_id");
					this.Onreference_set_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_score", DbType="Int")]
		public System.Nullable<int> score
		{
			get
			{
				return this._score;
			}
			set
			{
				if ((this._score != value))
				{
					this.OnscoreChanging(value);
					this.SendPropertyChanging();
					this._score = value;
					this.SendPropertyChanged("score");
					this.OnscoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_played", DbType="Bit")]
		public System.Nullable<bool> played
		{
			get
			{
				return this._played;
			}
			set
			{
				if ((this._played != value))
				{
					this.OnplayedChanging(value);
					this.SendPropertyChanging();
					this._played = value;
					this.SendPropertyChanged("played");
					this.OnplayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_docket_id", DbType="Int")]
		public System.Nullable<int> docket_id
		{
			get
			{
				return this._docket_id;
			}
			set
			{
				if ((this._docket_id != value))
				{
					if (this._Docket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondocket_idChanging(value);
					this.SendPropertyChanging();
					this._docket_id = value;
					this.SendPropertyChanged("docket_id");
					this.Ondocket_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_document_id", DbType="Int")]
		public System.Nullable<int> document_id
		{
			get
			{
				return this._document_id;
			}
			set
			{
				if ((this._document_id != value))
				{
					if ((this._Assignment.HasLoadedOrAssignedValue || this._Document.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ondocument_idChanging(value);
					this.SendPropertyChanging();
					this._document_id = value;
					this.SendPropertyChanged("document_id");
					this.Ondocument_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Docucheck_FilledSection", Storage="_FilledSections", ThisKey="id", OtherKey="docucheck_id")]
		public EntitySet<FilledSection> FilledSections
		{
			get
			{
				return this._FilledSections;
			}
			set
			{
				this._FilledSections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assignment_Docucheck", Storage="_Assignment", ThisKey="document_id", OtherKey="id", IsForeignKey=true)]
		public Assignment Assignment
		{
			get
			{
				return this._Assignment.Entity;
			}
			set
			{
				Assignment previousValue = this._Assignment.Entity;
				if (((previousValue != value) 
							|| (this._Assignment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Assignment.Entity = null;
						previousValue.Docuchecks.Remove(this);
					}
					this._Assignment.Entity = value;
					if ((value != null))
					{
						value.Docuchecks.Add(this);
						this._document_id = value.id;
					}
					else
					{
						this._document_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Assignment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Docket_Docucheck", Storage="_Docket", ThisKey="docket_id", OtherKey="id", IsForeignKey=true)]
		public Docket Docket
		{
			get
			{
				return this._Docket.Entity;
			}
			set
			{
				Docket previousValue = this._Docket.Entity;
				if (((previousValue != value) 
							|| (this._Docket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Docket.Entity = null;
						previousValue.Docuchecks.Remove(this);
					}
					this._Docket.Entity = value;
					if ((value != null))
					{
						value.Docuchecks.Add(this);
						this._docket_id = value.id;
					}
					else
					{
						this._docket_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Docket");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Document_Docucheck", Storage="_Document", ThisKey="document_id", OtherKey="id", IsForeignKey=true)]
		public Document Document
		{
			get
			{
				return this._Document.Entity;
			}
			set
			{
				Document previousValue = this._Document.Entity;
				if (((previousValue != value) 
							|| (this._Document.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Document.Entity = null;
						previousValue.Docuchecks.Remove(this);
					}
					this._Document.Entity = value;
					if ((value != null))
					{
						value.Docuchecks.Add(this);
						this._document_id = value.id;
					}
					else
					{
						this._document_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Document");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReferenceSet_Docucheck", Storage="_ReferenceSet", ThisKey="reference_set_id", OtherKey="id", IsForeignKey=true, DeleteRule="CASCADE")]
		public ReferenceSet ReferenceSet
		{
			get
			{
				return this._ReferenceSet.Entity;
			}
			set
			{
				ReferenceSet previousValue = this._ReferenceSet.Entity;
				if (((previousValue != value) 
							|| (this._ReferenceSet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReferenceSet.Entity = null;
						previousValue.Docuchecks.Remove(this);
					}
					this._ReferenceSet.Entity = value;
					if ((value != null))
					{
						value.Docuchecks.Add(this);
						this._reference_set_id = value.id;
					}
					else
					{
						this._reference_set_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("ReferenceSet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FilledSections(FilledSection entity)
		{
			this.SendPropertyChanging();
			entity.Docucheck = this;
		}
		
		private void detach_FilledSections(FilledSection entity)
		{
			this.SendPropertyChanging();
			entity.Docucheck = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.levels")]
	public partial class Level : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.Nullable<int> _difficulty;
		
		private EntitySet<Assignment> _Assignments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndifficultyChanging(System.Nullable<int> value);
    partial void OndifficultyChanged();
    #endregion
		
		public Level()
		{
			this._Assignments = new EntitySet<Assignment>(new Action<Assignment>(this.attach_Assignments), new Action<Assignment>(this.detach_Assignments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_difficulty", DbType="Int")]
		public System.Nullable<int> difficulty
		{
			get
			{
				return this._difficulty;
			}
			set
			{
				if ((this._difficulty != value))
				{
					this.OndifficultyChanging(value);
					this.SendPropertyChanging();
					this._difficulty = value;
					this.SendPropertyChanged("difficulty");
					this.OndifficultyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="level_Assignment", Storage="_Assignments", ThisKey="id", OtherKey="level_id")]
		public EntitySet<Assignment> Assignments
		{
			get
			{
				return this._Assignments;
			}
			set
			{
				this._Assignments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assignments(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Level = this;
		}
		
		private void detach_Assignments(Assignment entity)
		{
			this.SendPropertyChanging();
			entity.Level = null;
		}
	}
}
#pragma warning restore 1591
